generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  password       String
  sale_as_buyer  Sale[]       @relation("buyer")
  sale_as_seller Sale[]       @relation("seller")
  userAccess     UserAccess[]
  store          Store[]
  addresses      Address[]
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model UserAccess {
  id         String   @id @default(uuid())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Access     Access?  @relation(fields: [accessId], references: [id])
  accessId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Access {
  id         String       @id @default(uuid())
  name       String       @unique
  userAccess UserAccess[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  imageUrl  String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String
  isMain    Boolean  @default(false)
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Float
  amount      Int
  images      ProductImage[]
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  Store       Store?         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String?
  SaleProduct SaleProduct[]
}

model Store {
  id         String    @id @default(uuid())
  name       String
  Product    Product[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Sale {
  id              String        @id @default(uuid())
  total_value     Float
  Buyer           User?         @relation("buyer", fields: [buyerId], references: [id])
  buyerId         String?
  Seller          User?         @relation("seller", fields: [sellerId], references: [id])
  sellerId        String?
  Address         Address?      @relation(fields: [addressId], references: [id])
  addressId       String?
  stripeSessionId String?       @unique
  SaleProduct     SaleProduct[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model SaleProduct {
  id         String   @id @default(uuid())
  quantity   Int
  Sale       Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId     String
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Address {
  id           String   @id @default(uuid())
  street       String
  city         String
  state        String
  country      String
  zip          String
  houseNumber  String
  complement   String?
  neighborhood String
  userId       String   @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Sale         Sale[]
}
